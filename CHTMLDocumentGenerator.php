<?php

/* 
CHTMLDocumentGenerator - Generate HTML documents from PHP source files.
Copyright (C) 2011 Aleksi Räsänen <aleksi.rasanen@runosydan.net>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

	require 'CDocumentation/CDocumentation.php';

	// ***********************************************
	//	CHTMLDocumentGenerator
	/*!
		@brief Generate HTML documents from PHP 
		  source files.
		@author Aleksi Räsänen
		@email aleksi.rasanen@runosydan.net
		@license GNU AGPL
		@copyright Aleksi Räsänen 2011
	*/
	// ***********************************************
	class CHTMLDocumentGenerator
	{
		private $data;
		private $tags = array( '@author' => 'Author',
				'@brief' => 'Brief description',
				'@copyright' => 'Copyright',
				'@email' => 'E-Mail',
				'@license' => 'License' );
		private $CSS_file = 'CHTMLDocumentGenerator/document_generator.css';

		// ***********************************************
		//	getClassName
		/*!
			@brief Get name of a class from class variable $data
			@return String.
		*/
		// ***********************************************
		private function getClassName()
		{
			$data = $this->data;

			for( $i=0; $i < count( $data ); $i++ )
			{
				if( $data[$i]['type'] == 'class' )
					return $data[$i]['name'];
			}

			return '';
		}

		// ***********************************************
		//	getCSS
		/*!
			@brief Get CSS definitions for <style> block
			@return String
		*/
		// ***********************************************
		private function getCSS()
		{
			$return_string = '<style>';
			$return_string .= file_get_contents( $this->CSS_file );
			$return_string .= '</style>';

			return $return_string;
		}

		// ***********************************************
		//	generateHTMLHeader
		/*!
			@brief Create standard HTML header
			@return String
		*/
		// ***********************************************
		private function generateHTMLHeader()
		{
			$class_name = $this->getClassName();
			if( empty( $class_name ) )
				$class_name = 'Documentation for a non-class file';

			$str = '<!DOCTYPE html>'
				. '<head>';

			$str .= $this->getCSS();

			$str .= '<title>' . $class_name . '</title>'
				. '<meta http-equiv="Content-Type" content="'
					. 'text/html;charset=utf-8" />' 
				. '</head>'
				. '<body>';

			return $str;
		}

		// ***********************************************
		//	generateHTMLFooter
		/*!
			@brief Create standard HTML footer
			@return String
		*/
		// ***********************************************
		private function generateHTMLFooter()
		{
			$data = '<div id="footer">'
				. 'This document was generated by HTML Document Generator '
				. 'what is licensed under GNU AGPL. Source code can '
				. 'be found on <a href="https://github.com/stargazers/'
				. 'CHTMLDocumentGenerator">GitHub</a>.<br/>'
				. 'Author: Aleksi Räsänen, '
				. '<a href="mailto:aleksi.rasanen@runosydan.net">'
				. 'aleksi.rasanen@runosydan.net</a></div>';

			$data .= '</body></html>';
			return $data;
		}

		// ***********************************************
		//	getClassCommentBlock
		/*!
			@brief Search a comment block for a class
			@return Array
		*/
		// ***********************************************
		private function getClassCommentBlock()
		{
			for( $i=0; $i < count( $this->data ); $i++ )
			{
				if(! isset( $this->data[$i]['type'] ) )
					continue;

				if( $this->data[$i]['type'] == 'class' )
					return $this->data[$i];
			}

			return array();
		}

		// ***********************************************
		//	generateHTMLForClassInfo
		/*!
			@brief Creates class information HTML block
			@return String
		*/
		// ***********************************************
		private function generateHTMLForClassInfo()
		{
			$data = $this->getClassCommentBlock();
			
			if(! isset( $data['name'] ) )
				return '';

			$tags_to_show = array( 
				'author' => 'Author', 'email' => 'Email', 
				'copyright' => 'Copyright', 'license' => 'License',
				'brief' => 'Brief description' );

			$class_name = '';
			$class_name = $data['name'];

			$html = '<span class="titlebar">' . $class_name . '</span>'
				. '<div class="class_information">';

			foreach( $tags_to_show as $tag => $tag_desc )
			{
				if(! isset( $data[$tag] ) )
					continue;

				$html .= '<span class="tag_name">' . $tag_desc
					. '</span>' . '<span class="tag_value">';

				if( $tag == 'email' )
				{
					$html .= '<a href="mailto:' . $data[$tag] . '">' 
						. $data[$tag] . '</a>';
				}
				else
				{
					$html .= $data[$tag];
				}
				$html .= '</span>';
			}

			$html .= '</div>';
			return $html;
		}

		// ***********************************************
		//	generateHTMLForFunction
		/*!
			@brief Search all methods and create
			  div "method" where we put method informations
			@param $data Array where is correct method data
			@return String
		*/
		// ***********************************************
		private function generateHTMLForFunction( $data )
		{
			$tags_to_show = array( 
				'brief' => 'Brief description',
				'param' => 'Parameters',
				'return' => 'Return value' );

			$class = 'method_type_' . $data['type'];
			$html = '<a id="' . $data['name'] . '"></a>';

			if( $data['type'] == 'function' )
			{
				$html .= '<span class="titlebar_function">function '
					. $data['name'] . '</span>';
			}
			else
			{
				$html .= '<span class="titlebar_'
					. $data['type'] . '">' . $data['type'] 
					. ' function ' . $data['name'] . '</span>';
			}

			$html .= '<div class="method">';

			foreach( $tags_to_show as $tag => $tag_desc )
			{
				if(! isset( $data[$tag] ) )
					continue;

				$html .= '<span class="tag_name">' . $tag_desc . '</span>';

				if( $tag == 'param' )
					$html .= $this->createHTMLForParams( $data['param'] );
				else
				{
 					$html .= '<span class="tag_value">';

				$html .= $data[$tag] . '</span>';
				}
			}

			$html .= '</div>';
			return $html;
		}

		// ***********************************************
		//	createHTMLForParams
		/*!
			@brief Generate HTML for @params array. This is
			  used when we want to create table element what
			  is shown on method commentboxes.
			@param $data Array of method parameters and
			  their comments
			@return HTML String
		*/
		// ***********************************************
		private function createHTMLForParams( $data )
		{
			$html = '<table class="params_list">';
			foreach( $data as $param_name => $param_value )
			{
				$html .= '<tr><td><span class="param_name">'
					. $param_name . '</span></td><td>'
					. '<span class="param_value">'
					. $param_value . '</span></td>';

			}
			$html .= '</table>';

			return $html;
		}

		// ***********************************************
		//	getFunctionsInformation
		/*!
			TODO: This might be redundant, check it some day
			  if this can be removed
		*/
		// ***********************************************
		private function getFunctionsInformation( $type )
		{
			$return_string = '';
			for( $i=0; $i < count( $this->data ); $i++ )
			{
				$line = $this->data[$i];

				if( $line['type'] != $type )
					continue;
				
				$return_string .= $this->generateHTMLForFunction( $line );
			}

			return $return_string;
		}

		// ***********************************************
		//	createHTMLDocument
		/*!
			@brief Create a documentation from source file
			@return String.
		*/
		// ***********************************************
		public function createHTMLDocument()
		{
			$this->checkCSSFile();
			$html = $this->generateHTMLHeader();
			$html .= $this->generateHTMLForClassInfo();
			$html .= $this->generateHTMLContentsList();
			$html .= $this->getFunctionsInformation( 'public' );
			$html .= $this->getFunctionsInformation( 'private' );
			$html .= $this->getFunctionsInformation( 'function' );
			$html .= $this->generateHTMLFooter();
			return $html;
		}

		// ***********************************************
		//	generateHTMLContentsList
		/*!
			@brief Generates short contents list of all 
			  methods used in this class
			@return HTML String
		*/
		// ***********************************************
		private function generateHTMLContentsList()
		{
			$privates = $this->getFunctionNames( 'private' );
			$publics = $this->getFunctionNames( 'public' );
			$functions = $this->getFunctionNames( 'function' );

			$html = '<span class="titlebar">Contents</span>'
				. '<div class="contents_list">';

			$html .= $this->createMethodsList( 'Public methods', 
				$publics );
			$html .= $this->createMethodsList( 'Private methods', 
				$privates );
			$html .= $this->createMethodsList( 'Functions', 
				$functions );

			$html .= '</div>';

			return $html;
		}

		// ************************************************** 
		//  createMethodsList
		/*!
			@brief Creates a list of found methods and functions
			@param $title Title to show
			@param $items Array of items
			@return HTML String
		*/
		// ************************************************** 
		private function createMethodsList( $title, $items )
		{
			$html = '<span class="tag_name">' . $title 
				. '</span>' . '<ul>';

			if(! count( $items ) > 0 )
			{
				$html .= '<i>No ' . strtolower( $title ) . ' found.</i>';
				$html .= '</ul>';
				return $html;
			}

			foreach( $items as $method_name )
			{
				$html .= '<li><a href="#' . $method_name . '">'
					. $method_name . '</a></li>';
			}

			$html .= '</ul>';
			return $html;
		}


		// ***********************************************
		//	getFunctionNames
		/*!
			@brief Get function names which are type $type
			@param $type Type what must be private or public
			@return Array of function names
		*/
		// ***********************************************
		private function getFunctionNames( $type )
		{
			$return_array = array();
			for( $i=0; $i < count( $this->data ); $i++ )
			{
				if( isset( $this->data[$i]['type'] ) 
					&& $this->data[$i]['type'] == $type )
				{
					$return_array[] = $this->data[$i]['name'];
				}
			}

			sort( $return_array );
			return $return_array;
		}

		// ***********************************************
		//	checkCSSFile
		/*!
			@brief Check if given CSS file exists. If not,
			  throws and Exception
		*/
		// ***********************************************
		private function checkCSSFile()
		{
			if(! file_exists( $this->CSS_file ) )
			{
				throw new Exception( 'CSS File ' . $this->CSS_file 
				  . ' was not found!' );
			}
		}

		// ***********************************************
		//	setCSSFile
		/*!
			@brief Set CSS file to use if we do not want
			  to use document_generator.css file
			@param $filename CSS Filename
		*/
		// ***********************************************
		public function setCSSFile( $filename )
		{
			$this->CSS_file = $filename;
			$this->checkCSSFile();
		}

		// ***********************************************
		//	__construct
		/*!
			@brief Initializes variables
			@param $filename File to parse
		*/
		// ***********************************************
		public function __construct( $filename )
		{
			$cDoc = new CDocumentation( $filename );
			$this->data = $cDoc->parseFile();
		}
	}

?>
